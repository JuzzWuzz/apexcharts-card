/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const DataType = t.enumtype({
  DEFAULT: "default",
  ENERGY: "energy",
  HUMIDITY: "humidity",
  POWER: "power",
  TEMPERATURE: "temperature",
});

export const DataTypeGroup = t.enumtype({
  A: "a",
  B: "b",
});

export const MinMaxType = t.enumtype({
  AUTO: 0,
  FIXED: 1,
  SOFT: 2,
  ABSOLUTE: 3,
});

export const Period = t.enumtype({
  LAST_HOUR: "-1h",
  LAST_THREE_HOUR: "-3h",
  LAST_SIX_HOUR: "-6h",
  LAST_TWELVE_HOUR: "-12h",
  DAY: "1d",
  TWO_DAY: "2d",
  WEEK: "1w",
  MONTH: "1m",
});

export const Resolution = t.enumtype({
  RAW: "RAW",
  ONE_MINUTE: "PT1M",
  FIVE_MINUTES: "PT5M",
  FIFTEEN_MINUTES: "PT15M",
  THIRTY_MINUTES: "PT30M",
  ONE_HOUR: "PT1H",
  ONE_DAY: "P1D",
});

export const DataPoint = t.tuple("number", t.union("number", "null"));

export const ExtremasType = t.union("boolean", t.lit("min"), t.lit("max"));

export const LegendFunction = t.union(t.lit("last"), t.lit("sum"));

export const MinMaxPoint = t.iface([], {
  min: "DataPoint",
  max: "DataPoint",
});

export const MinMaxValue = t.union(
  t.lit("auto"),
  "number",
  "string",
  "undefined",
);

export const CardConfigExternal = t.iface([], {
  type: t.lit("custom:apexcharts-card2"),
  entity: "string",
  configTemplates: t.opt(t.union(t.array("string"), "string")),
  colorList: t.opt(t.array("string")),
  chartType: t.opt(t.union(t.lit("line"), t.lit("scatter"))),
  header: t.opt("CardHeaderExternalConfig"),
  now: t.opt("CardNowExternalConfig"),
  show: t.opt("CardShowExternalConfig"),
  allSeriesConfig: t.opt("AllSeriesConfigExternal"),
  allYaxisConfig: t.opt("AllYAxisConfigExternal"),
  seriesSets: t.array("SeriesSetConfigExternal"),
  apexConfig: t.opt("any"),
  period: t.opt("Period"),
  showDateSelector: t.opt("boolean"),
  autoRefreshTime: t.opt("number"),
  rememberOptions: t.opt("boolean"),
});

export const CardHeaderExternalConfig = t.iface([], {
  appendSeriesSetName: t.opt("boolean"),
  colorizeStates: t.opt("boolean"),
  show: t.opt("boolean"),
  showStates: t.opt("boolean"),
  title: t.opt("string"),
});

export const CardHeaderConfig = t.iface(["CardHeaderExternalConfig"], {
  appendSeriesSetName: "boolean",
  colorizeStates: "boolean",
  show: "boolean",
  showStates: "boolean",
});

export const CardNowExternalConfig = t.iface([], {
  color: t.opt("string"),
  label: t.opt("string"),
  show: t.opt("boolean"),
});

export const CardNowConfig = t.iface(["CardNowExternalConfig"], {
  color: "string",
  show: "boolean",
});

export const CardShowExternalConfig = t.iface([], {
  lastUpdated: t.opt("boolean"),
  loading: t.opt("boolean"),
});

export const CardShowConfig = t.iface(["CardShowExternalConfig"], {
  lastUpdated: "boolean",
  loading: "boolean",
});

export const DataTypeConfig = t.iface([], {
  dataType: "DataType",
  clampNegative: "boolean",
  floatPrecision: "number",
  unit: t.opt("string"),
  unitArray: t.opt(t.array("string")),
  unitSeparator: "string",
  unitStep: t.opt("number"),
});

export const SeriesShowConfigExternal = t.iface([], {
  extremas: t.opt("ExtremasType"),
  inChart: t.opt("boolean"),
  inHeader: t.opt("boolean"),
  legendFunction: t.opt("LegendFunction"),
  legendValue: t.opt("boolean"),
  nameInHeader: t.opt("boolean"),
});

export const SeriesShowConfig = t.iface(["SeriesShowConfigExternal"], {
  extremas: "ExtremasType",
  inChart: "boolean",
  inHeader: "boolean",
  legendFunction: "LegendFunction",
  legendValue: "boolean",
  nameInHeader: "boolean",
});

export const AllSeriesConfigExternal = t.iface([], {
  color: t.opt("string"),
  curve: t.opt(t.union(t.lit("smooth"), t.lit("straight"), t.lit("stepline"))),
  dataType: t.opt("DataType"),
  name: t.opt("string"),
  opacity: t.opt("number"),
  show: t.opt("SeriesShowConfigExternal"),
  strokeWidth: t.opt("number"),
  type: t.opt(t.union(t.lit("line"), t.lit("column"), t.lit("area"))),
  yAxisId: t.opt("string"),
});

export const SeriesConfigExternal = t.iface(["AllSeriesConfigExternal"], {
  measurement: "string",
  device: "string",
  channel: t.opt("string"),
});

export const SeriesConfig = t.iface(["SeriesConfigExternal"], {
  dataType: "DataType",
  index: "number",
  show: "SeriesShowConfig",
  yAxisId: "string",
  yAxisIndex: "number",
});

export const AllYAxisConfigExternal = t.iface([], {
  alignTo: t.opt("number"),
  dataType: t.opt("DataType"),
  floatPrecision: t.opt("number"),
  maxValue: "MinMaxValue",
  minValue: "MinMaxValue",
  opposite: t.opt("boolean"),
  show: t.opt("boolean"),
  apexConfig: t.opt("any"),
});

export const YAxisConfigExternal = t.iface(["AllYAxisConfigExternal"], {
  id: t.opt("string"),
});

export const YAxisConfig = t.iface(["YAxisConfigExternal"], {
  id: "string",
  dataType: "DataType",
  floatPrecision: "number",
  index: "number",
  maxType: "MinMaxType",
  minType: "MinMaxType",
  multiYAxis: "boolean",
  opposite: "boolean",
  show: "boolean",
});

export const SeriesSetConfigExternal = t.iface([], {
  name: "string",
  allSeriesConfig: t.opt("AllSeriesConfigExternal"),
  allYaxisConfig: t.opt("AllYAxisConfigExternal"),
  series: t.array("SeriesConfigExternal"),
  yAxes: t.opt(t.array("YAxisConfigExternal")),
});

export const SeriesSetConfig = t.iface([], {
  dataTypeGroup: "DataTypeGroup",
  name: "string",
  series: t.array("SeriesConfig"),
  yAxes: t.array("YAxisConfig"),
});

const exportedTypeSuite: t.ITypeSuite = {
  DataType,
  DataTypeGroup,
  MinMaxType,
  Period,
  Resolution,
  DataPoint,
  ExtremasType,
  LegendFunction,
  MinMaxPoint,
  MinMaxValue,
  CardConfigExternal,
  CardHeaderExternalConfig,
  CardHeaderConfig,
  CardNowExternalConfig,
  CardNowConfig,
  CardShowExternalConfig,
  CardShowConfig,
  DataTypeConfig,
  SeriesShowConfigExternal,
  SeriesShowConfig,
  AllSeriesConfigExternal,
  SeriesConfigExternal,
  SeriesConfig,
  AllYAxisConfigExternal,
  YAxisConfigExternal,
  YAxisConfig,
  SeriesSetConfigExternal,
  SeriesSetConfig,
};
export default exportedTypeSuite;
